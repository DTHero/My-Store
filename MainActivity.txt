package com.example.internntthien.accountfacebook2;

import android.*;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.util.Log;
import android.view.MenuInflater;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.AccessToken;
import com.facebook.FacebookSdk;
import com.facebook.LoggingBehavior;
import com.facebook.Profile;
import com.facebook.login.widget.ProfilePictureView;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.iid.FirebaseInstanceId;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

//

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener
        , OnMapReadyCallback, LocationListener
{

    public static final String LATITUDE="com.example.internntthien.accountfacebook.LATITUDE";
    public static final String LONGITUDE="com.example.internntthien.accountfacebook.LONGITUDE";

    ArrayAdapter<String> adapter;
    private GoogleMap mark;
    private LatLngBounds.Builder bounds;
    double longitude, latitude;
    protected LocationManager locationManager;
    Location location;
    private DatabaseReference database;
    private AccessToken token;
    private Profile profile;
    private String deviceToken;
    TextView username, status;
    ProfilePictureView profileView;
    ListView list;
    private ArrayList<String> userList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.google_maps);
        mapFragment.getMapAsync(this);

        FacebookSdk.sdkInitialize(getApplicationContext());
        FacebookSdk.setIsDebugEnabled(true);
        FacebookSdk.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        database = FirebaseDatabase.getInstance().getReference( "Coordinates");
        token = AccessToken.getCurrentAccessToken();
        profile = Profile.getCurrentProfile();
        deviceToken = FirebaseInstanceId.getInstance().getToken();

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

        pushData();

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
        View headerView = navigationView.getHeaderView(0);
        username = (TextView) headerView.findViewById(R.id.user_name);
        profileView = (ProfilePictureView) headerView.findViewById(R.id.imageView);
        status = (TextView) headerView.findViewById(R.id.status);
//        list = (ListView) findViewById(R.id.user_list);

        username.setText(profile.getName());
        profileView.setProfileId(token.getUserId());
        status.setText(token.getUserId());

//        searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);

//        userList = new ArrayList<String>();
////        loadData();
//
//        userList.addAll(Arrays.asList(getResources().getStringArray(R.array.tinhThanh)));
//
//        adapter=new ArrayAdapter<String>(MainActivity.this,android.R.layout.simple_list_item_1,userList);
//        list.setAdapter(adapter);

//        // The app will crash if display list is not called here.
//        setActionBar();
//        displayList();

    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.search, menu);

////        // Associate searchable configuration with the SearchView
////        SearchManager searchManager =
//////                (SearchManager) getSystemService(Context.SEARCH_SERVICE);
//        SearchView searchView =
//                (SearchView) menu.findItem(R.id.icon_search).getActionView();
//        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
//            @Override
//            public boolean onQueryTextSubmit(String s) {
//                return false;
//            }
//
//            @Override
//            public boolean onQueryTextChange(String s) {
//                list.setVisibility(View.VISIBLE);
//                adapter.getFilter().filter(s);
//                return false;
//            }
//        });
//        searchView.setOnCloseListener(new SearchView.OnCloseListener() {
//            @Override
//            public boolean onClose() {
//                list.setVisibility(View.GONE);
//                return false;
//            }
//        });
        return super.onCreateOptionsMenu(menu);

    }

//    @Override
//    public boolean onQueryTextSubmit(String query) {
////        userAdapter.filterData(query);
//        return false;
//    }
//
//    @Override
//    public boolean onQueryTextChange(String newText) {
////        userAdapter.filterData(newText);
//        list.setVisibility(View.VISIBLE);
//        adapter.getFilter().filter(newText);
//        return false;
//    }

//    /** Functions for SearchView **/
//    private void setActionBar() {
//        getActionBar().setDisplayHomeAsUpEnabled(true);
//        getActionBar().setTitle("Friends");
//
//        Typeface typeface = Typeface.createFromAsset(this.getAssets(), "fonts/vegur_2.otf");
//        int titleId = getResources().getIdentifier("action_bar_title", "id", "android");
//        TextView actionBarTitle = (TextView) (this.findViewById(titleId));
//        actionBarTitle.setTextColor(getResources().getColor(R.color.cardview_light_background));
//        actionBarTitle.setTypeface(typeface);
//    }
//

//    private void loadData() {
//
//        database.addValueEventListener(new ValueEventListener() {
//            @Override
//            public void onDataChange(DataSnapshot dataSnapshot) {
//                userList.clear();
//                for (DataSnapshot snapshot: dataSnapshot.getChildren()) {
//                    Coordinates coordinate = snapshot.getValue(Coordinates.class);
//                    userList.add(coordinate.getName()
//                            + "\nUser ID: "
//                            + coordinate.getUserID());
//                }
//            }
//            @Override
//            public void onCancelled(DatabaseError error) {
//                // Failed to read value
//                Toast.makeText(Main2Activity.this, "Failed to read value.",
//                        Toast.LENGTH_SHORT).show();
//            }
//        });
//
//    }
//    /** Enad here **/


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
//        if (id == R.id.action_settings) {
//            return true;
//        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

//        if (id == R.id.nav_camera) {
//            // Handle the camera action
//        } else if (id == R.id.nav_gallery) {
//
//        } else if (id == R.id.nav_slideshow) {
//
//        } else if (id == R.id.nav_manage) {

//        } else
        if (id == R.id.nav_send) {
            Intent intent = new Intent(MainActivity.this, Invite.class);
            startActivity(intent);
        } else if (id == R.id.nav_share){

//            Query getRef = database.orderByChild("userID").equalTo(token.getUserId());
//            getRef.addListenerForSingleValueEvent(new ValueEventListener() {
//                @Override
//                public void onDataChange(DataSnapshot dataSnapshot) {
//                    for (DataSnapshot appleSnapshot: dataSnapshot.getChildren()) {
//                        appleSnapshot.getRef().removeValue();
//                    }
//                }
//                @Override
//                public void onCancelled(DatabaseError databaseError) {
//                    Log.e("Finish", "onCancelled", databaseError.toException());
//                }
//            });

            Intent intent = new Intent(MainActivity.this, ShareLocation.class);
//            intent.putExtra(LATITUDE,getLocation().getLatitude());
//            intent.putExtra(LONGITUDE,getLocation().getLongitude());
            startActivity(intent);
        } else if (id == R.id.nav_log_out){
            Intent intent = new Intent(MainActivity.this, Finish.class);
            //Clear all activities and start new task
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
            startActivity(intent);
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    /**Necessary methods**/

    public Location getLocation(){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (locationManager != null) {
                if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION)
                        == PackageManager.PERMISSION_GRANTED
                        || checkSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION)
                        == PackageManager.PERMISSION_GRANTED) {
                    locationManager.removeUpdates(this);
                }
            }
        }
        if (!locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
            locationManager.requestLocationUpdates(
                    LocationManager.GPS_PROVIDER
                    , 0, 0, this);
            Log.d("GPS Enabled", "GPS Enabled");

            if (locationManager != null) {
                location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                if (location != null) {
                    latitude = location.getLatitude();
                    longitude = location.getLongitude();
                }
            }
        } else {
            locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER
                    , 0, 0, this);
            Log.d("Network", "Network");
            if (locationManager != null) {
                location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                location.getLongitude();
                location.getLatitude();
            }
        }
        return location;
    }
    @Override public void onLocationChanged (Location location){
    }
    @Override public void onProviderDisabled (String provider){
    }
    @Override public void onProviderEnabled (String provider){
    }
    @Override public void onStatusChanged (String provider,int status, Bundle extras){
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {

        mark = googleMap;
        bounds = new LatLngBounds.Builder();

        database.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                for (DataSnapshot snapshot: dataSnapshot.getChildren()) {
                    Coordinates coordinate = snapshot.getValue(Coordinates.class);
                    if (coordinate.getLatitude()!=0 ||coordinate.getLongitude()!=0) {
                        LatLng cur_loc = new LatLng(coordinate.getLatitude(),
                                coordinate.getLongitude());
//        mark.setMyLocationEnabled(true);
                        if (token.getUserId().equals(coordinate.getUserID()))
                            mark.addMarker(new MarkerOptions().position(cur_loc)
                                    .title("Your location!"));
                        else {
                            mark.addMarker(new MarkerOptions().position(cur_loc)
                                    .title(coordinate.getUserID() + "'s location"))
                                    .setIcon(BitmapDescriptorFactory.fromResource(R.mipmap.person_marker));
                        }
                        bounds.include(new LatLng(coordinate.getLatitude(), coordinate.getLongitude()));
                    }
                }
                mark.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds.build(), 50));
            }
            @Override
            public void onCancelled(DatabaseError error) {
                // Failed to read value
                Toast.makeText(MainActivity.this, "Failed to read value.",
                        Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void pushData(){
        Coordinates coordinate = new Coordinates(
                token.getUserId(),
                getLocation().getLatitude(),
                getLocation().getLongitude(),
                profile.getName(),
                deviceToken);
        database.push().setValue(coordinate);

    }

}


